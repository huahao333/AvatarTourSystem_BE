// <auto-generated />
using System;
using BusinessObjects.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObjects.Migrations
{
    [DbContext(typeof(AvatarTourDBContext))]
    partial class AvatarTourDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObjects.Models.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Roles")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ZaloUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Booking", b =>
                {
                    b.Property<string>("BookingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("BookingDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("DailyTourId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<float?>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BookingId")
                        .HasName("PK__Booking__551479477F27FEF3");

                    b.HasIndex("DailyTourId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("UserId");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.BookingByRevenue", b =>
                {
                    b.Property<string>("BookingByRevenueId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("RevenueId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.HasKey("BookingByRevenueId")
                        .HasName("PK__BookingByRevenue__551479477F27FEF9");

                    b.HasIndex("BookingId");

                    b.HasIndex("RevenueId");

                    b.ToTable("BookingByRevenue", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.City", b =>
                {
                    b.Property<string>("CityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.HasKey("CityId")
                        .HasName("PK__Booking__551479477F27FEF4");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.CustomerSupport", b =>
                {
                    b.Property<string>("CusSupportId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateResolved")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CusSupportId")
                        .HasName("PK__CustomerSupport__551479477C27FEF5");

                    b.HasIndex("RequestTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerSupport", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.DailyTicket", b =>
                {
                    b.Property<string>("DailyTicketId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("DailyTourId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TicketTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.HasKey("DailyTicketId")
                        .HasName("PK__DailyTicket__551479467C27FEC5");

                    b.HasIndex("DailyTourId");

                    b.HasIndex("TicketTypeId");

                    b.ToTable("DailyTicket", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.DailyTour", b =>
                {
                    b.Property<string>("DailyTourId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("DailyTicketId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DailyTourName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("DailyTourPrice")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Discount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageTourId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.HasKey("DailyTourId")
                        .HasName("PK__DailyTour__551479467C27FEF1");

                    b.HasIndex("PackageTourId");

                    b.ToTable("DailyTour", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Destination", b =>
                {
                    b.Property<string>("DestinationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("DestinationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("PriceDestination")
                        .HasColumnType("real");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.HasKey("DestinationId")
                        .HasName("PK__Destination__551479467C17FEF7");

                    b.HasIndex("CityId");

                    b.ToTable("Destination", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Feedback", b =>
                {
                    b.Property<string>("FeedbackId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("FeedbackMsg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FeedbackId")
                        .HasName("PK__Feedback__551479467C17FHF1");

                    b.HasIndex("BookingId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Location", b =>
                {
                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("DestinationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationType")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.HasKey("LocationId")
                        .HasName("PK__Location__551279467C17FHE1");

                    b.HasIndex("DestinationId");

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Notification", b =>
                {
                    b.Property<string>("NotifyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NotifyId")
                        .HasName("PK__Notification__531279467C17FFE2");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.POIType", b =>
                {
                    b.Property<string>("POITypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("POITypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.HasKey("POITypeId")
                        .HasName("PK__POIType__511372467B17FFC3");

                    b.ToTable("POIType", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.PackageTour", b =>
                {
                    b.Property<string>("PackageTourId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("PackageTourName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("PackageTourPrice")
                        .HasColumnType("real");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.HasKey("PackageTourId")
                        .HasName("PK__PackageTour__531279467C17FFG3");

                    b.HasIndex("CityId");

                    b.ToTable("PackageTour", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.PaymentMethod", b =>
                {
                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("PaymentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.HasKey("PaymentId")
                        .HasName("PK__PaymentMethod__539279467C17FFG3");

                    b.ToTable("PaymentMethod", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.PointOfInterest", b =>
                {
                    b.Property<string>("PointId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("POITypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PointName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.HasKey("PointId")
                        .HasName("PK__PointOfInterest__511379467C17FFC3");

                    b.HasIndex("LocationId");

                    b.HasIndex("POITypeId");

                    b.ToTable("PointOfInterest", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Rate", b =>
                {
                    b.Property<string>("RateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<int?>("RateStar")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RateId")
                        .HasName("PK__Rate__511379427A17FFC3");

                    b.HasIndex("BookingId");

                    b.HasIndex("UserId");

                    b.ToTable("Rate", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.RequestType", b =>
                {
                    b.Property<string>("RequestTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.HasKey("RequestTypeId")
                        .HasName("PK__RequestType__511372221B17FFC3");

                    b.ToTable("RequestType", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Revenue", b =>
                {
                    b.Property<string>("RevenueId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("RevenueDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<float?>("TotalRevenue")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.HasKey("RevenueId")
                        .HasName("PK__Revenue__511311221B17FEC3");

                    b.ToTable("Revenue", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Service", b =>
                {
                    b.Property<string>("ServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("ServicePrice")
                        .HasColumnType("real");

                    b.Property<string>("ServiceTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SupplierId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.HasKey("ServiceId")
                        .HasName("PK__Service__511379427A17DFC9");

                    b.HasIndex("LocationId");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.ServiceByTourSegment", b =>
                {
                    b.Property<string>("SBTSId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("ServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TourSegmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.HasKey("SBTSId")
                        .HasName("PK__ServiceByTourSegment__511379427A17CFF2");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TourSegmentId");

                    b.ToTable("ServiceByTourSegment", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.ServiceType", b =>
                {
                    b.Property<string>("ServiceTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("ServiceTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.HasKey("ServiceTypeId")
                        .HasName("PK__ServiceType__511379427A17CGF4");

                    b.ToTable("ServiceType", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.ServiceUsedByTicket", b =>
                {
                    b.Property<string>("SUBTId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("ServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TicketId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.HasKey("SUBTId")
                        .HasName("PK__ServiceUsedByTicket__511378227A17CEF2");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TicketId");

                    b.ToTable("ServiceUsedByTicket", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Supplier", b =>
                {
                    b.Property<string>("SupplierId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SupplierName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.HasKey("SupplierId")
                        .HasName("PK__Supplier__512219427A17CGF4");

                    b.ToTable("Supplier", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Ticket", b =>
                {
                    b.Property<string>("TicketId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<float?>("Price")
                        .HasColumnType("real");

                    b.Property<string>("QR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TicketName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.HasKey("TicketId")
                        .HasName("PK__Ticket__521178227A17CEF2");

                    b.HasIndex("BookingId");

                    b.HasIndex("TicketTypeId");

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.TicketType", b =>
                {
                    b.Property<string>("TicketTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("PackageTourId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TicketTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.HasKey("TicketTypeId")
                        .HasName("PK__TicketType__521178227A17CFF8");

                    b.HasIndex("PackageTourId");

                    b.ToTable("TicketType", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.TourSegment", b =>
                {
                    b.Property<string>("TourSegmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("DestinationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PackageTourId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.HasKey("TourSegmentId")
                        .HasName("PK__TourSegment__521178777A17CFE8");

                    b.HasIndex("DestinationId");

                    b.HasIndex("PackageTourId");

                    b.ToTable("TourSegment", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.TransactionsHistory", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TransactionId")
                        .HasName("PK__TransactionsHistory__521171177A17CFE8");

                    b.HasIndex("BookingId");

                    b.HasIndex("UserId");

                    b.ToTable("TransactionsHistory", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Booking", b =>
                {
                    b.HasOne("BusinessObjects.Models.DailyTour", "DailyTours")
                        .WithMany("Bookings")
                        .HasForeignKey("DailyTourId")
                        .HasConstraintName("FK__Booking__DailyTourId__3A81B329");

                    b.HasOne("BusinessObjects.Models.PaymentMethod", "PaymentMethods")
                        .WithMany("Bookings")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("FK__Booking__PaymentId__3A81B328");

                    b.HasOne("BusinessObjects.Models.Account", "Accounts")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Booking__UserId__3A81B327");

                    b.Navigation("Accounts");

                    b.Navigation("DailyTours");

                    b.Navigation("PaymentMethods");
                });

            modelBuilder.Entity("BusinessObjects.Models.BookingByRevenue", b =>
                {
                    b.HasOne("BusinessObjects.Models.Booking", "Bookings")
                        .WithMany("BookingByRevenues")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK__BookingByRevenue__BookingId__3A81D227");

                    b.HasOne("BusinessObjects.Models.Revenue", "Revenues")
                        .WithMany("BookingByRevenues")
                        .HasForeignKey("RevenueId")
                        .HasConstraintName("FK__BookingByRevenue__RevenueId__3A81C227");

                    b.Navigation("Bookings");

                    b.Navigation("Revenues");
                });

            modelBuilder.Entity("BusinessObjects.Models.CustomerSupport", b =>
                {
                    b.HasOne("BusinessObjects.Models.RequestType", "RequestTypes")
                        .WithMany("CustomerSupports")
                        .HasForeignKey("RequestTypeId")
                        .HasConstraintName("FK__CustomerSupport__RequestTypeId__3A81A229");

                    b.HasOne("BusinessObjects.Models.Account", "Accounts")
                        .WithMany("CustomerSupports")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__CustomerSupport__UserId__3A81A227");

                    b.Navigation("Accounts");

                    b.Navigation("RequestTypes");
                });

            modelBuilder.Entity("BusinessObjects.Models.DailyTicket", b =>
                {
                    b.HasOne("BusinessObjects.Models.DailyTour", "DailyTours")
                        .WithMany("DailyTickets")
                        .HasForeignKey("DailyTourId")
                        .HasConstraintName("FK__DailyTicket__DailyTourId__3A81E267");

                    b.HasOne("BusinessObjects.Models.TicketType", "TicketTypes")
                        .WithMany("DailyTickets")
                        .HasForeignKey("TicketTypeId")
                        .HasConstraintName("FK__DailyTicket__TicketTypeId__3A81E217");

                    b.Navigation("DailyTours");

                    b.Navigation("TicketTypes");
                });

            modelBuilder.Entity("BusinessObjects.Models.DailyTour", b =>
                {
                    b.HasOne("BusinessObjects.Models.PackageTour", "PackageTours")
                        .WithMany("DailyTours")
                        .HasForeignKey("PackageTourId")
                        .HasConstraintName("FK__DailyTour__PackageTourId__3A81G267");

                    b.Navigation("PackageTours");
                });

            modelBuilder.Entity("BusinessObjects.Models.Destination", b =>
                {
                    b.HasOne("BusinessObjects.Models.City", "Cities")
                        .WithMany("Destinations")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK__Destination__CityId__3A81G227");

                    b.Navigation("Cities");
                });

            modelBuilder.Entity("BusinessObjects.Models.Feedback", b =>
                {
                    b.HasOne("BusinessObjects.Models.Booking", "Bookings")
                        .WithMany("Feedbacks")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK__Feedback__BookingId__3A81G887");

                    b.HasOne("BusinessObjects.Models.Account", "Accounts")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Feedback__UserId__3A81G827");

                    b.Navigation("Accounts");

                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BusinessObjects.Models.Location", b =>
                {
                    b.HasOne("BusinessObjects.Models.Destination", "Destinations")
                        .WithMany("Locations")
                        .HasForeignKey("DestinationId")
                        .HasConstraintName("FK__Location__DestinationId__3A81E127");

                    b.Navigation("Destinations");
                });

            modelBuilder.Entity("BusinessObjects.Models.Notification", b =>
                {
                    b.HasOne("BusinessObjects.Models.Account", "Accounts")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Notification__UserId__3A81F117");

                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("BusinessObjects.Models.PackageTour", b =>
                {
                    b.HasOne("BusinessObjects.Models.City", "Cities")
                        .WithMany("PackageTours")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK__PackageTour__CityId__3C81F217");

                    b.Navigation("Cities");
                });

            modelBuilder.Entity("BusinessObjects.Models.PointOfInterest", b =>
                {
                    b.HasOne("BusinessObjects.Models.Location", "Locations")
                        .WithMany("PointOfInterests")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK__PointOfInterest__LocationId__3F21C417");

                    b.HasOne("BusinessObjects.Models.POIType", "POITypes")
                        .WithMany("PointOfInterests")
                        .HasForeignKey("POITypeId")
                        .HasConstraintName("FK__PointOfInterest__POITypeId__3F21F217");

                    b.Navigation("Locations");

                    b.Navigation("POITypes");
                });

            modelBuilder.Entity("BusinessObjects.Models.Rate", b =>
                {
                    b.HasOne("BusinessObjects.Models.Booking", "Bookings")
                        .WithMany("Rates")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK__Rate__BookingId__3D71C417");

                    b.HasOne("BusinessObjects.Models.Account", "Accounts")
                        .WithMany("Rates")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Rate__UserId__3C51F217");

                    b.Navigation("Accounts");

                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BusinessObjects.Models.Service", b =>
                {
                    b.HasOne("BusinessObjects.Models.Location", "Locations")
                        .WithMany("Services")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK__Service__LocationId__3D71F217");

                    b.HasOne("BusinessObjects.Models.ServiceType", "ServiceTypes")
                        .WithMany("Services")
                        .HasForeignKey("ServiceTypeId")
                        .HasConstraintName("FK__Service__ServiceTypeId__3B21F217");

                    b.HasOne("BusinessObjects.Models.Supplier", "Suppliers")
                        .WithMany("Services")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK__Service__SupplierId__3D71E717");

                    b.Navigation("Locations");

                    b.Navigation("ServiceTypes");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("BusinessObjects.Models.ServiceByTourSegment", b =>
                {
                    b.HasOne("BusinessObjects.Models.Service", "Services")
                        .WithMany("ServiceByTourSegments")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK__ServiceByTourSegment__ServiceId__3E78F217");

                    b.HasOne("BusinessObjects.Models.TourSegment", "TourSegments")
                        .WithMany("ServiceByTourSegments")
                        .HasForeignKey("TourSegmentId")
                        .HasConstraintName("FK__ServiceByTourSegment__TourSegmentId__3C71F227");

                    b.Navigation("Services");

                    b.Navigation("TourSegments");
                });

            modelBuilder.Entity("BusinessObjects.Models.ServiceUsedByTicket", b =>
                {
                    b.HasOne("BusinessObjects.Models.Service", "Services")
                        .WithMany("ServiceUsedByTickets")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK__ServiceUsedByTicket__ServiceId__3E21F217");

                    b.HasOne("BusinessObjects.Models.Ticket", "Tickets")
                        .WithMany("ServiceUsedByTickets")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FK__ServiceUsedByTicket__TicketId__3B21F227");

                    b.Navigation("Services");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("BusinessObjects.Models.Ticket", b =>
                {
                    b.HasOne("BusinessObjects.Models.Booking", "Bookings")
                        .WithMany("Tickets")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK__Ticket__BookingId__3G23F227");

                    b.HasOne("BusinessObjects.Models.TicketType", "TicketTypes")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketTypeId")
                        .HasConstraintName("FK__Ticket__TicketTypeId__3G28F217");

                    b.Navigation("Bookings");

                    b.Navigation("TicketTypes");
                });

            modelBuilder.Entity("BusinessObjects.Models.TicketType", b =>
                {
                    b.HasOne("BusinessObjects.Models.PackageTour", "PackageTours")
                        .WithMany("TicketTypes")
                        .HasForeignKey("PackageTourId")
                        .HasConstraintName("FK__TicketType__PackageTourId__3G13F297");

                    b.Navigation("PackageTours");
                });

            modelBuilder.Entity("BusinessObjects.Models.TourSegment", b =>
                {
                    b.HasOne("BusinessObjects.Models.Destination", "Destinations")
                        .WithMany("TourSegments")
                        .HasForeignKey("DestinationId")
                        .HasConstraintName("FK__TourSegment__DestinationId__3F33F297");

                    b.HasOne("BusinessObjects.Models.PackageTour", "PackageTours")
                        .WithMany("TourSegments")
                        .HasForeignKey("PackageTourId")
                        .HasConstraintName("FK__TourSegment__PackageTourId__3G13F297");

                    b.Navigation("Destinations");

                    b.Navigation("PackageTours");
                });

            modelBuilder.Entity("BusinessObjects.Models.TransactionsHistory", b =>
                {
                    b.HasOne("BusinessObjects.Models.Booking", "Bookings")
                        .WithMany("TransactionsHistories")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK__TransactionsHistory__BookingId__3E99F888");

                    b.HasOne("BusinessObjects.Models.Account", "Accounts")
                        .WithMany("TransactionsHistorys")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__TransactionsHistory__UserId__3G44F122");

                    b.Navigation("Accounts");

                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BusinessObjects.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BusinessObjects.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BusinessObjects.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessObjects.Models.Account", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("CustomerSupports");

                    b.Navigation("Feedbacks");

                    b.Navigation("Notifications");

                    b.Navigation("Rates");

                    b.Navigation("TransactionsHistorys");
                });

            modelBuilder.Entity("BusinessObjects.Models.Booking", b =>
                {
                    b.Navigation("BookingByRevenues");

                    b.Navigation("Feedbacks");

                    b.Navigation("Rates");

                    b.Navigation("Tickets");

                    b.Navigation("TransactionsHistories");
                });

            modelBuilder.Entity("BusinessObjects.Models.City", b =>
                {
                    b.Navigation("Destinations");

                    b.Navigation("PackageTours");
                });

            modelBuilder.Entity("BusinessObjects.Models.DailyTour", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("DailyTickets");
                });

            modelBuilder.Entity("BusinessObjects.Models.Destination", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("TourSegments");
                });

            modelBuilder.Entity("BusinessObjects.Models.Location", b =>
                {
                    b.Navigation("PointOfInterests");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("BusinessObjects.Models.POIType", b =>
                {
                    b.Navigation("PointOfInterests");
                });

            modelBuilder.Entity("BusinessObjects.Models.PackageTour", b =>
                {
                    b.Navigation("DailyTours");

                    b.Navigation("TicketTypes");

                    b.Navigation("TourSegments");
                });

            modelBuilder.Entity("BusinessObjects.Models.PaymentMethod", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BusinessObjects.Models.RequestType", b =>
                {
                    b.Navigation("CustomerSupports");
                });

            modelBuilder.Entity("BusinessObjects.Models.Revenue", b =>
                {
                    b.Navigation("BookingByRevenues");
                });

            modelBuilder.Entity("BusinessObjects.Models.Service", b =>
                {
                    b.Navigation("ServiceByTourSegments");

                    b.Navigation("ServiceUsedByTickets");
                });

            modelBuilder.Entity("BusinessObjects.Models.ServiceType", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("BusinessObjects.Models.Supplier", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("BusinessObjects.Models.Ticket", b =>
                {
                    b.Navigation("ServiceUsedByTickets");
                });

            modelBuilder.Entity("BusinessObjects.Models.TicketType", b =>
                {
                    b.Navigation("DailyTickets");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("BusinessObjects.Models.TourSegment", b =>
                {
                    b.Navigation("ServiceByTourSegments");
                });
#pragma warning restore 612, 618
        }
    }
}
